// Generated by CoffeeScript 1.9.2
(function() {
  var extract_prime_exprs, reason, reason_expr;

  extract_prime_exprs = function(ast) {
    var key, node, ret;
    if (typeof ast === 'string') {
      return ast;
    }
    ret = [];
    for (key in ast) {
      node = ast[key];
      if (key === 'ope') {
        continue;
      }
      ret.push(extract_prime_exprs(node));
    }
    return ret;
  };

  reason_expr = function(expr, env) {
    var left, right;
    if (expr.ope) {
      left = expr.left ? reason_expr(expr.left, env) : void 0;
      right = reason_expr(expr.right, env);
      switch (expr.ope) {
        case '<->':
          return left === right;
        case '->':
          return !(left && !right);
        case '^':
          return left && right;
        case 'v':
          return left || right;
        case '~':
          return !right;
      }
    } else {
      return env[expr];
    }
  };

  reason = function(expr, prime_exprs) {
    var count, env, i, j, l, ref, ref1, vals;
    for (count = j = 0, ref = Math.pow(2, prime_exprs.length); 0 <= ref ? j < ref : j > ref; count = 0 <= ref ? ++j : --j) {
      vals = [];
      for (i = l = 0, ref1 = prime_exprs.length; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
        vals.push(((count >> i) & 1) === 1);
      }
      env = _.object(prime_exprs, vals);
      if (!reason_expr(expr, env)) {
        return {
          result: false,
          values: env
        };
      }
    }
    return {
      result: true
    };
  };

  $(function() {
    return $('#check_button').click(function() {
      var ast, e, prime_exprs, result, values;
      try {
        ast = PEG.parse($('#proposition').val());
      } catch (_error) {
        e = _error;
        $('#result').text(e.toString()).css({
          color: '#f00'
        });
      }
      prime_exprs = _.uniq(_.flatten(extract_prime_exprs(ast)));
      result = reason(ast, prime_exprs);
      $('#result').css({
        color: '#000'
      });
      if (result.result) {
        return $('#result').text('正しいです');
      } else {
        values = _.map(result.values, function(v, k) {
          return k + ": " + v;
        }).join(', ');
        return $('#result').text("正しくないです " + values);
      }
    });
  });

}).call(this);
